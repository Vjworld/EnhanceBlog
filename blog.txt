<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>5-Step SEO Blog Transformation Tool</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f7f9fb;
        }
        .step-indicator {
            transition: all 0.3s ease;
        }
        .prompt-box {
            background-color: #1f2937; /* Darker gray for prompt box */
            color: #f3f4f6;
            font-size: 0.875rem;
            border-radius: 0.5rem;
            padding: 1rem;
            position: relative;
        }
        .prompt-box pre {
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        .copy-button {
            transition: background-color 0.2s, transform 0.1s;
        }
        .copy-button:active {
            transform: scale(0.98);
        }
    </style>
</head>
<body class="min-h-screen">

    <div id="app" class="max-w-4xl mx-auto p-4 sm:p-6 lg:p-8">

        <!-- Header -->
        <header class="text-center mb-10">
            <h1 class="text-3xl sm:text-4xl font-extrabold text-gray-900 mb-2">
                The 5-Step SEO Blog Transformation Guide
            </h1>
            <p class="text-lg text-gray-600">
                Turn your rough draft into high-quality, SEO-optimized content.
            </p>
        </header>

        <!-- Step Navigation -->
        <div id="step-navigation" class="flex justify-between items-center bg-white p-4 rounded-xl shadow-lg mb-8 sticky top-0 z-10">
            <!-- Indicators will be generated by JS -->
        </div>

        <!-- Current Step Content -->
        <div id="step-content-card" class="bg-white p-6 sm:p-8 rounded-xl shadow-2xl transition-all duration-300">
            <h2 id="step-title" class="text-2xl sm:text-3xl font-bold text-indigo-700 mb-1"></h2>
            <p id="step-subtitle" class="text-md text-gray-500 mb-6"></p>

            <div id="step-sections" class="space-y-6">
                <!-- Sections will be generated by JS -->
            </div>

            <!-- Publish Message -->
            <div id="publish-message" class="hidden text-center p-8 bg-green-50 border-4 border-green-200 rounded-xl mt-8">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-green-500 mx-auto mb-3" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                <h3 class="text-xl font-bold text-green-700">YOU DID IT! READY TO PUBLISH!</h3>
                <p class="text-gray-600 mt-2">The blog post now has a solid SEO foundation, compelling structure, and high-quality, readable content. Time to share your work!</p>
            </div>
        </div>

        <!-- Navigation Buttons -->
        <div class="flex justify-between mt-6">
            <button id="prev-btn" onclick="navigateStep(-1)" disabled class="flex items-center px-4 py-2 bg-gray-300 text-gray-700 font-semibold rounded-lg shadow-md hover:bg-gray-400 disabled:opacity-50 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
                Previous
            </button>
            <button id="next-btn" onclick="navigateStep(1)" class="flex items-center px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 transition-colors">
                Next Step
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>

    </div>

    <script>
        // Global state
        let currentStepIndex = 0;
        const totalSteps = 5;

        // SVGs for dynamic button updates
        const prevSvg = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" /></svg>`;
        const nextSvg = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" /></svg>`;


        // Data structure derived from seo_blog_guide.md
        const stepsData = [
            {
                step: 1,
                title: "KEYWORD STRATEGY",
                subtitle: "Finding What People Search For",
                sections: [
                    {
                        letter: "A",
                        heading: "Identify Core & Secondary Keywords",
                        instructions: "1. Look at the core topic of your rough content. 2. Use the prompt below, replacing the bracketed information with your content details (topic, outline, and target audience). 3. The AI will suggest a **Primary Focus Keyword** and several **Secondary Keywords**. Note them downâ€”you will use them everywhere!",
                        promptTitle: "AI Prompt to Use (Prompt 1):",
                        prompt: "Act as a Content Strategist. Based on this topic/outline: [Paste your blog topic/rough outline here]. What are 3-5 high-intent, long-tail keywords my target audience of [Describe your audience, e.g., small business owners in the tech industry] would be searching for? Rank them by perceived relevance and suggest the primary focus keyword.",
                    },
                    {
                        letter: "B",
                        heading: "Understand Search Intent",
                        instructions: "1. Take the **Primary Focus Keyword** you just identified. 2. Use the prompt below to determine *why* the user is searching for that term (e.g., are they looking for information, or are they ready to buy a product?). 3. This helps ensure our content structure and tone match the user's expectations.",
                        promptTitle: "AI Prompt to Use (Prompt 2):",
                        prompt: "Analyze the primary keyword [Insert Primary Keyword from Prompt 1]. What is the dominant search intent (Informational, Navigational, Transactional, or Commercial Investigation)? Based on this intent, what is the best content format (e.g., guide, listicle, comparison, review) and what must the introduction immediately promise?",
                    }
                ]
            },
            {
                step: 2,
                title: "STRUCTURE AND OUTLINE OPTIMIZATION",
                subtitle: "Building the Framework",
                sections: [
                    {
                        letter: "A",
                        heading: "Optimize the Title & Headings",
                        instructions: "1. Take your original title idea (or just the topic) and your **Primary Focus Keyword**. 2. Use the prompt to generate high-quality, clickable titles that fit Google's character limits. 3. Select the best option for your final H1 (main title).",
                        promptTitle: "AI Prompt to Use (Prompt 3):",
                        prompt: "I have a working title of [Insert current working title] for a post targeting the primary keyword [Insert Primary Keyword]. Generate 5 high-performing, click-worthy H1 title options. Titles should be under 60 characters and use a mix of listicle, question, and 'how-to' formats.",
                    },
                    {
                        letter: "B",
                        heading: "Refine the Content Flow",
                        instructions: "1. Copy your entire rough content or outline. 2. Use the prompt to generate a new, comprehensive outline with H2 and H3 headings. The AI will ensure keywords are integrated logically. 3. This new outline is your final structure for writing/editing the full post.",
                        promptTitle: "AI Prompt to Use (Prompt 4):",
                        prompt: "Review this rough content/outline: [Paste your rough content/outline here]. Create a complete, detailed SEO-optimized outline using H2 and H3 tags. Ensure the primary keyword [Insert Primary Keyword] and the secondary keywords [Insert Secondary Keywords] are integrated naturally into the headings. The outline must include a section for a Call-to-Action (CTA) and a comprehensive FAQ.",
                    }
                ]
            },
            {
                step: 3,
                title: "CONTENT EXPANSION AND QUALITY ENHANCEMENT",
                subtitle: "Adding Depth and Polish",
                sections: [
                    {
                        letter: "A",
                        heading: "Rewrite & Integrate",
                        instructions: "1. Work section by section from your new outline (Prompt 4). 2. Paste the rough content for *just that section* into the prompt below. 3. Instruct the AI on the tone you need and which **Secondary Keyword** should be worked into that section. Repeat this for all main sections.",
                        promptTitle: "AI Prompt to Use (Prompt 5 - Iterative):",
                        prompt: "Act as an expert copywriter in the [Your Industry] niche. Take the content for this section: [Paste a specific section of your rough content]. Rewrite it to be more engaging, use a [Specify Tone, e.g., professional, friendly, authoritative] tone, and naturally integrate the secondary keyword [Insert a Secondary Keyword]. Ensure the information is up-to-date and provides specific, actionable advice for our target audience of [Describe your audience].",
                    },
                    {
                        letter: "B",
                        heading: "Add 'Information Gain'",
                        instructions: "1. To outrank competitors, your content needs unique data or insights. 2. Run the following prompt for each major H2 section to find powerful data points to add to the text.",
                        promptTitle: "AI Prompt to Use (Prompt 6):",
                        prompt: "For the blog section with the heading [Insert H2 heading from your new outline], suggest 3 statistics, unique insights, or specific examples that would add significant, unique value (information gain) for our readers in [Your Industry]. The goal is to make this section the definitive resource on this topic.",
                    },
                    {
                        letter: "C",
                        heading: "Craft a Strong Conclusion & CTA",
                        instructions: "1. A good blog must tell the reader what to do next. 2. Use this prompt to generate the final summary paragraph and the Call-to-Action (CTA).",
                        promptTitle: "AI Prompt to Use (Prompt 7):",
                        prompt: "Write a compelling conclusion paragraph for the article that summarizes the main takeaway and includes a strong, clear Call-to-Action (CTA) prompting the reader to [Specify desired action, e.g., 'Download our free guide' or 'Sign up for a demo'].",
                    }
                ]
            },
            {
                step: 4,
                title: "ON-PAGE SEO FINALIZATION",
                subtitle: "Preparing for Search Engines",
                sections: [
                    {
                        letter: "A",
                        heading: "Generate Meta Description",
                        instructions: "1. A meta description is the short snippet users see on the Google search results page. It must entice the click. 2. Use the prompt to generate several options, ensuring they are short, powerful, and contain the **Primary Focus Keyword**.",
                        promptTitle: "AI Prompt to Use (Prompt 8):",
                        prompt: "Write 3 highly engaging meta descriptions for the article, based on this title [Insert H1 title] and primary keyword [Insert Primary Keyword]. Each description must be under 155 characters, include the primary keyword, and create a strong reason for the user to click.",
                    },
                    {
                        letter: "B",
                        heading: "Internal & External Linking",
                        instructions: "1. Linking is vital for SEO. **Internal links** point to other pages on our site; **External links** links point to high-authority, non-competitor sites. 2. Use the prompt to get ideas for which pages to link to and from within your article.",
                        promptTitle: "AI Prompt to Use (Prompt 9):",
                        prompt: "Assuming this blog post is now complete, suggest 3-5 specific, relevant topics on our company website that this new article should link to (internal links). Also, suggest 2 authoritative, non-competitor external sources that would be valuable to link out to.",
                    },
                    {
                        letter: "C",
                        heading: "FAQ/Schema Optimization",
                        instructions: "1. Adding an FAQ section at the end is great for targeting 'Featured Snippets.' 2. Use the prompt below, pasting your **FULL, REWRITTEN article** content, to generate the FAQ section.",
                        promptTitle: "AI Prompt to Use (Prompt 10):",
                        prompt: "Generate 5 frequently asked questions (FAQs) and their concise, direct answers based on the complete content of the article: [Paste the full, rewritten article]. Format these as a list suitable for FAQ schema implementation, ensuring the answers are brief and clearly address the user's query.",
                    }
                ]
            },
            {
                step: 5,
                title: "READABILITY AND POLISH",
                subtitle: "Making it Easy to Read",
                sections: [
                    {
                        letter: "A",
                        heading: "Check Readability",
                        instructions: "1. Use the prompt to check if your language is accessible. Simple writing often performs best online. 2. The AI will suggest specific sentence or paragraph fixes.",
                        promptTitle: "AI Prompt to Use (Prompt 11):",
                        prompt: "Analyze the following complete blog post for its readability score (e.g., Flesch-Kincaid). Suggest 3 specific areas where the sentence structure or vocabulary could be simplified and improved for a target audience with an 8th-grade reading level. [Paste the complete article].",
                    },
                    {
                        letter: "B",
                        heading: "Suggest Visuals",
                        instructions: "1. Visuals break up the text and help explain complex concepts. 2. Use this prompt to get specific ideas for images, charts, or graphics needed for each section before you publish.",
                        promptTitle: "AI Prompt to Use (Prompt 12):",
                        prompt: "Based on the content of the article: [Paste the complete article], suggest 3-5 visual content ideas (e.g., specific charts, custom illustrations, or simple graphics) that would best illustrate the key points in sections [List your H2 headings].",
                    }
                ]
            }
        ];

        // Functions to manage state and rendering

        /**
         * Renders the navigation pills at the top of the app.
         */
        function renderNavigation() {
            const navContainer = document.getElementById('step-navigation');
            navContainer.innerHTML = '';

            stepsData.forEach((stepData, index) => {
                const isActive = index === currentStepIndex;
                const isComplete = index < currentStepIndex;
                const stepElement = document.createElement('button');

                let classes = 'step-indicator flex-1 mx-1 py-2 text-sm font-medium rounded-full transition-all duration-300 focus:outline-none';

                if (isActive) {
                    classes += ' bg-indigo-600 text-white shadow-lg scale-105';
                } else if (isComplete) {
                    classes += ' bg-green-100 text-green-700 hover:bg-green-200';
                } else {
                    classes += ' bg-gray-200 text-gray-500 hover:bg-gray-300';
                }

                stepElement.className = classes;
                stepElement.setAttribute('onclick', `setCurrentStep(${index})`);
                stepElement.innerHTML = `Step ${stepData.step}`;
                navContainer.appendChild(stepElement);
            });
        }

        /**
         * Renders the detailed content for the current step.
         */
        function renderStepContent() {
            const sectionsContainer = document.getElementById('step-sections');
            const prevBtn = document.getElementById('prev-btn');
            const nextBtn = document.getElementById('next-btn');
            const publishMessage = document.getElementById('publish-message');

            // CRITICAL FIX: Branch immediately to handle the final state (index 5)
            if (currentStepIndex === totalSteps) {
                // Final step view - No access to stepsData[5]
                document.getElementById('step-title').textContent = "CONGRATULATIONS!";
                document.getElementById('step-subtitle').textContent = "Your blog post is fully optimized and ready to go live.";
                sectionsContainer.innerHTML = '';
                publishMessage.classList.remove('hidden');

                // Navigation updates for Final Step (Go Back)
                prevBtn.innerHTML = prevSvg + 'Go Back';
                nextBtn.classList.add('hidden'); // Hide next button on final step
            } else {
                const step = stepsData[currentStepIndex]; // Safe access to stepsData[0] through stepsData[4]

                publishMessage.classList.add('hidden');
                nextBtn.classList.remove('hidden');

                // Update main title and subtitle
                document.getElementById('step-title').textContent = `${step.title}`;
                document.getElementById('step-subtitle').textContent = step.subtitle;

                sectionsContainer.innerHTML = step.sections.map(section => `
                    <div class="border-b pb-6 last:border-b-0">
                        <h3 class="text-xl font-semibold text-gray-800 mb-3 flex items-start">
                            <span class="inline-flex items-center justify-center h-8 w-8 rounded-full bg-indigo-100 text-indigo-600 mr-3 mt-0.5">${section.letter}</span>
                            ${section.heading}
                        </h3>
                        <div class="ml-11 text-gray-600 mb-4">${section.instructions}</div>

                        <div class="prompt-box ml-11">
                            <p class="font-bold text-indigo-300 mb-2">${section.promptTitle}</p>
                            <pre id="prompt-${step.step}-${section.letter}">${section.prompt}</pre>
                            <button onclick="copyPrompt('prompt-${step.step}-${section.letter}', this)" class="copy-button absolute top-3 right-3 p-2 bg-indigo-600 hover:bg-indigo-500 rounded-lg text-white text-xs font-bold shadow-md">
                                Copy Prompt
                            </button>
                        </div>
                    </div>
                `).join('');

                // Update Next Button logic for steps 0-4
                const isFinalStandardStep = currentStepIndex === totalSteps - 1;

                nextBtn.classList.toggle('bg-indigo-600', !isFinalStandardStep);
                nextBtn.classList.toggle('hover:bg-indigo-700', !isFinalStandardStep);
                nextBtn.classList.toggle('bg-green-600', isFinalStandardStep);
                nextBtn.classList.toggle('hover:bg-green-700', isFinalStandardStep);

                if (isFinalStandardStep) {
                    nextBtn.innerHTML = 'Finish & Publish ' + nextSvg;
                } else {
                    nextBtn.innerHTML = 'Next Step ' + nextSvg;
                }

                prevBtn.innerHTML = prevSvg + 'Previous'; // Ensure 'Previous' is shown with SVG
            }


            // Update navigation button states
            prevBtn.disabled = currentStepIndex === 0;

            // Simplify class toggling for prevBtn to rely on disabled attribute for styling
            if (currentStepIndex === 0) {
                 prevBtn.className = 'flex items-center px-4 py-2 bg-gray-300 text-gray-700 font-semibold rounded-lg shadow-md hover:bg-gray-400 disabled:opacity-50 transition-colors';
            } else {
                 prevBtn.className = 'flex items-center px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 transition-colors';
            }
        }

        /**
         * Navigates to the previous or next step.
         * @param {number} direction - 1 for next, -1 for previous.
         */
        function navigateStep(direction) {
            const newIndex = currentStepIndex + direction;
            if (newIndex >= 0 && newIndex <= totalSteps) {
                currentStepIndex = newIndex;
                renderApp();
                // Scroll to top of the content card
                document.getElementById('step-content-card').scrollIntoView({ behavior: 'smooth' });
            }
        }

        /**
         * Sets the current step index directly.
         * @param {number} index - The index of the step to navigate to.
         */
        function setCurrentStep(index) {
            if (index >= 0 && index < totalSteps) {
                currentStepIndex = index;
                renderApp();
            }
        }

        /**
         * Copies the prompt text to the clipboard.
         * @param {string} elementId - The ID of the <pre> element containing the prompt.
         * @param {HTMLButtonElement} button - The button element that was clicked.
         */
        function copyPrompt(elementId, button) {
            const promptText = document.getElementById(elementId).textContent.trim();

            // Fallback for clipboard API, as navigator.clipboard.writeText() may not work in iframes
            try {
                const textarea = document.createElement('textarea');
                textarea.value = promptText;
                document.body.appendChild(textarea);
                textarea.select();
                document.execCommand('copy');
                document.body.removeChild(textarea);

                button.textContent = 'Copied!';
                setTimeout(() => {
                    button.textContent = 'Copy Prompt';
                }, 2000);

            } catch (err) {
                console.error('Failed to copy text using fallback:', err);
                button.textContent = 'Failed!';
                setTimeout(() => {
                    button.textContent = 'Copy Prompt';
                }, 2000);
            }
        }

        /**
         * Initializes and updates the entire application view.
         */
        function renderApp() {
            renderNavigation();
            renderStepContent();
        }

        // Initialize the app on page load
        window.onload = renderApp;
    </script>
</body>
</html>
